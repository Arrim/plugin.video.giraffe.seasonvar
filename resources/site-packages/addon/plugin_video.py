# coding: utf-8
# vim:fenc=utf-8:sts=0:ts=4:sw=4:et:tw=80

#
# Copyright © 2016 gr4ph3 <giraffeoncode@gmail.com>
#
# Distributed under terms of the MIT license.
#
from __future__ import unicode_literals
from addon.common import Addon, getLogger
from datetime import datetime, timedelta
import seasonvar.rss as rss
import seasonvar.mainpage as mainpage
from seasonvar.series import Series, url2thumb
import xbmcgui
import xbmcplugin


addon = Addon('plugin.video.me.seasonvar')
logger = getLogger('plugin.video.me.seasonvar')


def li(name, **kwargs):
    thumb = kwargs.get('thumb')
    playable = kwargs.get('playable')
    li = xbmcgui.ListItem(name)
    if thumb is not None:
        li.setArt(thumb)
    if playable is not None:
        li.setProperty('IsPlayable', str(playable))
    return li


def add_directory_to_list(dirname, url, **kwargs):
    items_count = kwargs.get('items_count')
    litem = li(dirname, **kwargs)
    if items_count:
        ret = xbmcplugin.addDirectoryItem(addon.handler,
                                          url, litem,
                                          True, items_count)
    else:
        ret = xbmcplugin.addDirectoryItem(addon.handler,
                                          url, litem,
                                          True)
    if not ret:
        logger.error('failed to add {0} directory item'.format(dirname))


def add_item_to_list(name, url, **kwargs):
    litem = li(name, **kwargs)
    ret = xbmcplugin.addDirectoryItem(addon.handler, url, litem, False)
    if not ret:
        logger.error('failed to add {0} item'.format(name))


def list_end():
    xbmcplugin.endOfDirectory(addon.handler)


def screen_start(args):
    date = datetime.today()
    for offset in range(7):
        datestr = date.strftime('%d.%m.%Y')
        add_directory_to_list(
            datestr,
            addon.make_url({'action': 'screen_date',
                            'date': datestr})
        )
        date -= timedelta(days=1)
    add_directory_to_list(
        u'Поиск',
        addon.make_url({'action': 'screen_alphabet'})
    )
    list_end()


def screen_date(args):
    date = args.get('date')
    if date is None:
        logger.error(
            'screen_date: "date" is missing or malformed: {0}'.format(args))
        return

    rss_date_items = list(rss.items(date))
    if rss_date_items:
        date_items = rss_date_items
    else:
        date_items = list(mainpage.items(date))

    if len(date_items) == 0:
        logger.error('screen_date: date {0} not found'.format(date))
        return

    for item in date_items:
        add_directory_to_list(
            '{0} {1}'.format(item['name'], item['changes']),
            addon.make_url({'action': 'screen_episodes',
                            'url': item['url']}),
            thumb=url2thumb(item['url'])
        )
    list_end()


def screen_episodes(args):
    url = args.get('url')
    if url is None:
        logger.error('screen_episodes: "url" arg is missing {0}'.format(args))
        return

    series = Series(url)
    seasons_count = len(series.seasons)
    season = series.current_season
    if seasons_count > 1:
        add_directory_to_list(
            u'сезон {0}/{1}'.format(season.number, seasons_count),
            addon.make_url({'action': 'screen_seasons', 'url': url}),
            items_count=len(series.seasons)
        )
    for episode in season.episodes:
        add_item_to_list(
            episode['name'],
            addon.make_url({'action': 'play', 'url': episode['url']}),
            thumb=episode['thumb'],
            playable=True
        )
    list_end()


def screen_seasons(args):
    url = args.get('url')
    if url is None:
        logger.error('screen_episodes: "url" arg is missing {0}'.format(args))
        return

    series = Series(url)
    for season in series.seasons:
        if season.number == series.current_season.number:
            prefix = u'* '
        else:
            prefix = u''
        add_directory_to_list(
            u'{0}сезон {1}'.format(prefix, season.number),
            addon.make_url({'action': 'screen_episodes', 'url': season.url}),
            thumb=season.thumb
        )
    list_end()


def play(args):
    url = args.get('url')
    if url is None:
        logger.error('play: "url" arg is missing {0}'.format(args))
        return
    item = xbmcgui.ListItem(path=url)
    item.setProperty('IsPlayable', 'true')
    xbmcplugin.setResolvedUrl(addon.handler, True, item)


def main():
    if 'action' in addon.args:
        action = addon.args['action']
    else:
        action = 'screen_start'

    try:
        {'screen_start': screen_start,
         'screen_date': screen_date,
         'screen_episodes': screen_episodes,
         'screen_seasons': screen_seasons,
         'play': play,
         }[action](addon.args)
    except KeyError:
        logger.error('wrong action {0}'.format(addon.args['action']))
