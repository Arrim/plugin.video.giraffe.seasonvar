# coding: utf-8

#
# Copyright Â© 2017 weirdgiraffe <giraffe@cyberzoo.xyz>
#
# Distributed under terms of the MIT license.
#
from __future__ import unicode_literals
import random
import re
from seasonvar import SeasonvarRequester


class Season:
    def __init__(self, url, html=None, requester=SeasonvarRequester()):
        self.__requester = requester
        self.url = url
        self.thumb = self._thumb_url(self.url)
        self.__html = html
        self.number = 0

    @property
    def playlists(self):
        return self._playlists()

    def episodes(self, translation=None):
        url = self._playlist4translation(translation)
        print(url)
        playlist_url = self.__requester.absurl(url)
        somenum = random.uniform(0.0, 1.0)
        playlist_url += '&{0:0.16f}'.format(somenum)
        playlist = self.__requester.get_json(
            url=playlist_url,
            Referer=self.__requester.absurl(self.url)
        )
        print(playlist)
        return list(self._playlist_entries(playlist))

    def _playlist_entries(self, playlist_dict):
        playlist = playlist_dict['playlist']
        for entry in playlist:
            if 'playlist' in entry:
                for episode in entry['playlist']:
                    yield {'url': episode['file'],
                           'name': episode['comment'].replace('<br>', ' '),
                           'thumb': self.thumb}
            else:
                yield {'url': entry['file'],
                       'name': entry['comment'].replace('<br>', ' '),
                       'thumb': self.thumb}

    def _playlist4translation(self, translation):
        pl = self.playlists
        for t in pl:
            if t['translation'] == translation:
                return t['playlist_url']
        return re.sub(
            r'trans[^/]+/',
            r'trans/',
            pl[0]['playlist_url'])

    def _playlists(self):
        if self.__html is None:
            absurl = self.__requester.absurl(self.url)
            self.__html = self.__requester.get(absurl)
        tb = self._translations_block(self.__html)
        return [x for x in self._translations(tb)]

    @staticmethod
    def _translations(htmlblock):
        r = re.compile(
            r'<li\s+id="translate.*?>(.*?)</li>.*?'
            r'var\s+pl\d+\s+=\s+"(.*?)";',
            re.DOTALL)
        for name, url in r.findall(htmlblock):
            yield {'translation': name.strip(), 'playlist_url': url.strip()}

    @staticmethod
    def _translations_block(html):
        r = re.compile(r'<ul\s+id="translateDiv"(.*?)</ul>', re.DOTALL)
        for b in r.findall(html):
            return b

    @staticmethod
    def _thumb_url(url):
        r = re.compile(r'^(?:http://)?.*?/serial-(\d+)-(?:.+?)'
                       r'(?:-\d+-(?:sezon|season))?\.html$')
        for sid in r.findall(url):
            return 'http://cdn.seasonvar.ru/oblojka/{0}.jpg'.format(sid)
