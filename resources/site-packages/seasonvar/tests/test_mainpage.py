# coding: utf-8

#
# Copyright © 2017 weirdgiraffe <giraffe@cyberzoo.xyz>
#
# Distributed under terms of the MIT license.
#
from __future__ import unicode_literals
import codecs
import os
import pytest
import requests
from datetime import datetime
from seasonvar.mainpage import page_dayblocks, dayblock_items, dayitems


def assetpath(path):
    return os.path.join(os.path.dirname(__file__), 'assets', path)


@pytest.mark.parametrize('asset, expected_dates', [
    ('dayblock_single.html', ['15.01.2017']),
    ('dayblock_multiple.html', ['15.01.2017', '14.01.2017'])
])
def test_dayblock(asset, expected_dates):
    with codecs.open(assetpath(asset), 'r', 'utf-8') as f:
        dates = []
        for d, content in page_dayblocks(f.read()):
            dates.append(d)
            assert len(content) > 0
        assert dates == expected_dates


@pytest.mark.parametrize('asset, expected_items', [
    ('dayblock_single.html', [
        {'changes': '2 серия (Hamster)',
         'name': 'Табу',
         'url': '/serial-14866-Tabu.html'},
        {'changes': '1 серия (NewStudio)',
         'name': 'Лемони Сникет: 33 несчастья',
         'url': '/serial-14959-Lemoni_Sniket_33_neschast_ya.html'},
        {'changes': '(1 сезон) 8 серия',
         'name': 'Однофунтовое Евангелие',
         'url': '/serial-14606-Odnofuntovoe_Evangelie.html'}]),
])
def test_dayblock_items(asset, expected_items):
    with codecs.open(assetpath(asset), 'r', 'utf-8') as f:
        html = f.read()
        dayblocks = [c for x, c in page_dayblocks(html)]
        assert len(dayblocks) == 1
        assert len(dayblocks[0]) > 0
        items = [x for x in dayblock_items(dayblocks[0])]
        assert len(items) == len(expected_items)
        assert items == expected_items


@pytest.mark.online
def test_dayblocks_on_mainpage():
    res = requests.get('http://seasonvar.ru')
    assert res.status_code == 200
    dates = []
    for d, dayblock in page_dayblocks(res.text):
        dates.append(d)
        assert len(dayblock) > 0
        items = [x for x in dayblock_items(dayblock)]
        assert len(items) > 0
    assert len(dates) == 7 or len(dates) == 8


@pytest.mark.online
def test_dyaitems_for_today():
    date = datetime.today()
    datestr = date.strftime('%d.%m.%Y')
    items = [x for x in dayitems(datestr)]
    assert len(items) > 0
