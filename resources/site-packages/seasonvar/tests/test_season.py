# coding: utf-8

#
# Copyright Â© 2017 weirdgiraffe <giraffe@cyberzoo.xyz>
#
# Distributed under terms of the MIT license.
#
from __future__ import unicode_literals
import codecs
import os
import pytest
import re
import requests
from seasonvar.season import Season


def assetpath(path):
    return os.path.join(os.path.dirname(__file__), 'assets', path)


@pytest.mark.parametrize('url,asset', [
    ('/serial-13945-Horoshee_mesto.html',
     'serial-13945-Horoshee_mesto.html'),
])
def test_initialisation(url, asset):
    with codecs.open(assetpath(asset), 'r', 'utf-8') as f:
        s = Season(url=url, html=f.read())
        assert re.match(r'http://[a-z-A-z0-9\/\.]+.jpg', s.thumb)
        assert len(s.playlists) > 0


@pytest.mark.parametrize('asset, expected_count', [
    ('serial-13945-Horoshee_mesto.html', 1),
])
def test_translations_block_extraction(asset, expected_count):
    with codecs.open(assetpath(asset), 'r', 'utf-8') as f:
        html = f.read()
        assert Season._translations_block(html) is not None


@pytest.mark.parametrize('asset, expected_count', [
    ('translations_block_one_entry.html', 1),
    ('translations_block_multiple_entries.html', 2),
])
def test_translations_extraction(asset, expected_count):
    with codecs.open(assetpath(asset), 'r', 'utf-8') as f:
        htmlblock = f.read()
        translations = [x for x in Season._translations(htmlblock)]
        assert len(translations) == expected_count
        for t in translations:
            assert len(t['translation']) != 0
            assert re.match(r'/playls.*/list.xml\?time=\d+', t['playlist_url'])


@pytest.mark.online
def test_online_translations_extraction():
    s = Season('http://seasonvar.ru/serial-13945-Horoshee_mesto.html')
    for t in s.playlists:
        assert len(t['translation']) != 0
        assert re.match(r'/playls.*/list.xml\?time=\d+', t['playlist_url'])


@pytest.mark.online
def test_online_episodes():
    s = Season('http://seasonvar.ru/serial-13945-Horoshee_mesto.html')
    for e in s.episodes:
        assert re.match(r'.*\.m3u8$', e['url'])
        assert len(e['name']) != 0
        assert e['thumb'] == s.thumb
        res = requests.get(e['url'])
        assert res.status_code == 200
